diff --git a/drivers/platform/x86/asus-wmi.c b/drivers/platform/x86/asus-wmi.c
index 942f101..f7351eb 100644
--- a/drivers/platform/x86/asus-wmi.c
+++ b/drivers/platform/x86/asus-wmi.c
@@ -5111,6 +5111,7 @@ static int asus_hotk_restore(struct device *device)
 	return 0;
 }
 
+#if defined(CONFIG_SUSPEND)
 static void asus_ally_s2idle_restore(void)
 {
 	if (use_ally_mcu_hack == ASUS_WMI_ALLY_MCU_HACK_ENABLED) {
@@ -5119,6 +5120,7 @@ static void asus_ally_s2idle_restore(void)
 		msleep(ASUS_USB0_PWR_EC0_CSEE_WAIT);
 	}
 }
+#endif
 
 static int asus_hotk_prepare(struct device *device)
 {
@@ -5130,10 +5132,12 @@ static int asus_hotk_prepare(struct device *device)
 	return 0;
 }
 
+#if defined(CONFIG_SUSPEND)
 /* Use only for Ally devices due to the wake_on_ac */
 static struct acpi_s2idle_dev_ops asus_ally_s2idle_dev_ops = {
 	.restore = asus_ally_s2idle_restore,
 };
+#endif
 
 static const struct dev_pm_ops asus_pm_ops = {
 	.thaw = asus_hotk_thaw,
@@ -5166,9 +5170,11 @@ static int asus_wmi_probe(struct platform_device *pdev)
 			return ret;
 	}
 
+#if defined(CONFIG_SUSPEND)
 	ret = acpi_register_lps0_dev(&asus_ally_s2idle_dev_ops);
 	if (ret)
 		pr_warn("failed to register LPS0 sleep handler in asus-wmi\n");
+#endif
 
 	return asus_wmi_add(pdev);
 }
@@ -5202,7 +5208,9 @@ EXPORT_SYMBOL_GPL(asus_wmi_register_driver);
 
 void asus_wmi_unregister_driver(struct asus_wmi_driver *driver)
 {
+#if defined(CONFIG_SUSPEND)
 	acpi_unregister_lps0_dev(&asus_ally_s2idle_dev_ops);
+#endif
 	platform_device_unregister(driver->platform_device);
 	platform_driver_unregister(&driver->platform_driver);
 	used = false;
